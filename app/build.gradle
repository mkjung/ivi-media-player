apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    flavorDimensions "target", "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    task luaPlaylistCopy(type: Copy) {
        from '../share/lua/playlist'
        into 'src/main/assets/lua/playlist'
        exclude '**/*.txt'
    }

    task luaMetaCopy(type: Copy) {
        from '../share/lua/meta'
        into 'src/main/assets/lua/meta'
        exclude '**/*.txt'
    }

    task libcompatCopy(type: Copy) {
        from '../libvlc/libcompat/libs/armeabi'
        into 'assets'
        include '**/*.so'
    }

    task libcompatDelete(type: Delete) {
        delete fileTree('assets') {
            include '**/*.so'
        }
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "io.github.mkjung.iviplayer"
        minSdkVersion 17
        targetSdkVersion 24
        versionCode 1
        versionName "0.0.1"

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
//        resValue "string", "build_revision", revision()

        tasks.whenTaskAdded { task ->
            if (task.name.startsWith('merge')) {
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy

                if (task.name.contains('ARMv7') || task.name.contains('ARMv6')
                 || task.name.contains('ARMv5')) {
                    task.dependsOn libcompatCopy
                }
                else {
                    task.dependsOn libcompatDelete
                }
            }
        }

        //Set the build ABI according to build types only if not launched from compile.sh
//        if (System.getenv('PASSWORD_KEYSTORE') == null)
//            tasks.whenTaskAdded { task ->
//                if (task.name.startsWith('assemble')) {
//                    if (task.name.endsWith('ARMv5Debug'))
//                        task.dependsOn(":libvlc:buildDebugARMv5")
//                    else if (task.name.endsWith('ARMv6fpuDebug'))
//                        task.dependsOn(":libvlc:buildDebugARMv6")
//                    else if (task.name.endsWith('ARMv6nofpuDebug'))
//                        task.dependsOn(":libvlc:buildDebugARMv6_nofpu")
//                    else if (task.name.endsWith('ARMv7Debug'))
//                        task.dependsOn(":libvlc:buildDebugARMv7")
//                    else if (task.name.endsWith('ARMv8Debug'))
//                        task.dependsOn(":libvlc:buildDebugARM64")
//                    else if (task.name.endsWith('X86Debug'))
//                        task.dependsOn(":libvlc:buildDebugx86")
//                    else if (task.name.endsWith('X86_64Debug'))
//                        task.dependsOn(":libvlc:buildDebugx86_64")
//                    else if (task.name.endsWith('MIPSDebug'))
//                        task.dependsOn(":libvlc:buildDebugMIPS")
//                    else if (task.name.endsWith('MIPS64Debug'))
//                        task.dependsOn(":libvlc:buildDebugMIPS64")
//                }
//            }
    }

    signingConfigs {

        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */
            storeFile file(keyStoreFile)
            keyAlias storealias
            if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                storePassword = System.getenv('PASSWORD_KEYSTORE')
                keyPassword = System.getenv('PASSWORD_KEYSTORE')
            } else {
                storePassword storepwd
                keyPassword storepwd
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
        }
    }
    productFlavors {
        vanilla {
            dimension "target"
            versionCode = 1
        }
 //       chrome {
 //           minSdkVersion 19
 //           dimension "target"
 //           versionCode = 2
 //       }
 //       ARMv5 {
 //           dimension "abi"
 //           versionCode = 1
 //       }
 //       ARMv6nofpu {
 //           dimension "abi"
 //           versionCode = 2
 //       }
 //       ARMv6fpu {
 //           dimension "abi"
 //           versionCode = 3
 //       }
        ARMv7 {
            dimension "abi"
            versionCode = 4
        }
        x86 {
            dimension "abi"
            versionCode = 5
        }
//        MIPS {
//            dimension "abi"
//            versionCode = 6
//        }
//        ARMv8 {
//            dimension "abi"
//            versionCode = 7
//        }
//        x86_64 {
//            dimension "abi"
//            versionCode = 8
//        }
//        MIPS64 {
//            dimension "abi"
//            versionCode = 9
//        }
    }

    // make per-variant version code
    applicationVariants.all { variant ->
        def manifestParser = new com.android.builder.core.DefaultManifestParser()
        // get the version code of each flavor
        def vlcVersion = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
        def targetVersion = variant.productFlavors.get(0).versionCode
        def abiVersion = variant.productFlavors.get(1).versionCode

        // set the composite code
        variant.mergedFlavor.versionCode = targetVersion * 10000000 + manifestParser.getVersionCode(android.sourceSets.main.manifest.srcFile) + abiVersion
        variant.mergedFlavor.versionName = vlcVersion

        //Custom APK name
        variant.outputs.each { output ->
            def outputName = "vlc-android-player-"
            if (!variant.productFlavors.get(0).name.equals("vanilla"))
                outputName += variant.productFlavors.get(0).name.toUpperCase() + "-"
            outputName += vlcVersion + "-" + variant.productFlavors.get(1).name + ".apk"
            output.outputFile = new File(output.outputFile.parentFile, outputName);

            //set intents with correct package name
            output.processManifest.doLast{
                def manifestOutFile = output.processManifest.manifestOutputFile
                def newFileContents = manifestOutFile.getText('UTF-8').replace("_PACKAGENAME_", variant.applicationId)
                manifestOutFile.write(newFileContents, 'UTF-8')
            }
        }
    }

    sourceSets.main {
        manifest.srcFile 'src/main/AndroidManifest.xml'
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/java']
        aidl.srcDirs = ['src/main/java']
        renderscript.srcDirs = ['src/main/java']
        res.srcDirs = ['src/main/res']
        assets.srcDirs = ['src/main/assets']
    }
    sourceSets.release {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }
    sourceSets.test {
        java.srcDirs = ['test']
    }
//    sourceSets.chrome {
//        manifest.srcFile 'flavors/chrome/AndroidManifest.xml'
//        res.srcDirs = ['flavors/chrome/res']
//    }
}

dependencies {
    compile project(':api')
    compile project(':axmlrpc')
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:cardview-v7:24.1.1'
    compile 'com.android.support:recyclerview-v7:24.1.1'
    compile 'com.android.support:design:24.1.1'
    compile 'com.android.support:support-annotations:24.1.1'
    compile 'com.android.support:preference-v7:24.1.1'
    compile 'com.android.support:percent:24.1.1'
    compile 'com.android.support:leanback-v17:24.1.1'
    compile 'com.android.support:preference-leanback-v17:24.1.1'
    compile 'io.github.mkjung:ivi-media-framework:0.0.3'
    testCompile 'junit:junit:4.12'
}

def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

//def revision() {
//    def code = new ByteArrayOutputStream()
//    exec {
//        commandLine 'git', 'rev-parse', '--short', 'HEAD'
//        standardOutput = code
//    }
//    return code.toString()
//}

//def vlcRevision() {
//    def code = new ByteArrayOutputStream()
//    def vlc = new ByteArrayOutputStream()
//    exec {
//        commandLine 'git', 'rev-parse', '--short', 'HEAD'
//        workingDir '../vlc'
//        standardOutput = vlc
//    }
//    return vlc.toString()
//}
